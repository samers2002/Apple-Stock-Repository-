{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "73169718-e1bd-45eb-94a0-022e468f41e1",
   "metadata": {},
   "source": [
    "### Importing Pandas\n",
    "\n",
    "#### Packages\n",
    "Packages provide additional tools and functions not present in base Python. Python includes a number of packages to start with, the Anaconda distribution which we've all downloaded for Unit 3 comes with the \"Pandas\" package already installed.\n",
    "\n",
    "Once you've installed a package, you can load it into your current Python session with the import function. Otherwise these functions will not be available.\n",
    "\n",
    "\n",
    "#### Pandas\n",
    "\n",
    "Like spreadsheets in Microsoft Excel, Pandas allows us to store our data in tabular, multi-dimensional objects (dataframes) with familiar features like rows, columns, and headers. This is useful because it makes management, manipulation, and cleaning of large datasets much easier than would be the case using Python's built-in data structures such as lists. Pandas also provides a wide range of useful tools for working with data once it has been stored and structured.\n",
    "\n",
    "Begin by importing the pandas package using the following command:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0cc58b18-bc88-4bba-b6e2-80a2f245712b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0ab1081-4d00-4fd1-a896-0ce78ea11d4e",
   "metadata": {},
   "source": [
    "### Creating a DataFrame\n",
    "\n",
    "#### Working Directories & Relative Paths\n",
    "\n",
    "By now, you should have either downloaded the csv file \"Apple.csv\" from canvas, or saved your own data as a csv file. I've stored my copy in the same folder as this Jupyter Notebook. **NOTE:** make sure that your csv file is saved in the same working directory as your .ipynb notebook file that you will use. \n",
    "\n",
    "Remember that Jupyter Notebooks automatically set your working directory to the folder where the .ipynb is saved. You'll have to save the document at least once to set your directory, but once there you can use what's called relative file paths to access the files there.\n",
    "\n",
    "If a file is located in your working directory, its relative path is just the name of the file!\n",
    "\n",
    "#### Using the `pd.read_csv()` function\n",
    "\n",
    "`pd.read_csv` reads the tabular data from a Comma Separated Values (csv) file into a dataframe object that we'll define as `df`.\n",
    "\n",
    "To create our dataframe object we'll define our object `df` by executing the `pd.read_csv()`function on our data file by inserting the relative file path into the parathenses."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "69c7816c-b89c-4b44-a449-930bc88b3f9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"Apple.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60c1d64a-f366-406c-b45f-4771313f0a68",
   "metadata": {},
   "source": [
    "### Finding and Filtering Data\n",
    "You are going to explore the Apple Stock data set and go through logical steps to arrive at the number of years that the Apple share price was over 70$. But firstly, you should try and get an idea of what the data is about so you can understand the content and structure of this data set. The first step you are going to do is take samples from the chosen data set.You will type \"df.sample(n=x)\" and that would give you an x amount of random samples of the data frame. The x represents the number of samples and in this example, try  the number 40 for x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "17051269-7076-45e7-892d-a3cffc71c58b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8140</th>\n",
       "      <td>2013-03-22</td>\n",
       "      <td>16.235001</td>\n",
       "      <td>16.503571</td>\n",
       "      <td>16.182501</td>\n",
       "      <td>16.496786</td>\n",
       "      <td>14.465927</td>\n",
       "      <td>3.951052e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4016</th>\n",
       "      <td>1996-10-30</td>\n",
       "      <td>0.209821</td>\n",
       "      <td>0.214286</td>\n",
       "      <td>0.204241</td>\n",
       "      <td>0.204241</td>\n",
       "      <td>0.176493</td>\n",
       "      <td>2.570512e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1127</th>\n",
       "      <td>1985-05-29</td>\n",
       "      <td>0.076451</td>\n",
       "      <td>0.077009</td>\n",
       "      <td>0.076451</td>\n",
       "      <td>0.076451</td>\n",
       "      <td>0.060316</td>\n",
       "      <td>2.465568e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6817</th>\n",
       "      <td>2007-12-18</td>\n",
       "      <td>6.661428</td>\n",
       "      <td>6.690357</td>\n",
       "      <td>6.378572</td>\n",
       "      <td>6.535000</td>\n",
       "      <td>5.647151</td>\n",
       "      <td>1.222603e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>566</th>\n",
       "      <td>1983-03-10</td>\n",
       "      <td>0.194754</td>\n",
       "      <td>0.196987</td>\n",
       "      <td>0.190290</td>\n",
       "      <td>0.191964</td>\n",
       "      <td>0.151451</td>\n",
       "      <td>1.126048e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1178</th>\n",
       "      <td>1985-08-09</td>\n",
       "      <td>0.068080</td>\n",
       "      <td>0.068080</td>\n",
       "      <td>0.068080</td>\n",
       "      <td>0.068080</td>\n",
       "      <td>0.053712</td>\n",
       "      <td>6.095040e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6031</th>\n",
       "      <td>2004-11-03</td>\n",
       "      <td>0.970893</td>\n",
       "      <td>1.001964</td>\n",
       "      <td>0.964107</td>\n",
       "      <td>0.987679</td>\n",
       "      <td>0.853492</td>\n",
       "      <td>1.204174e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8575</th>\n",
       "      <td>2014-12-11</td>\n",
       "      <td>28.065001</td>\n",
       "      <td>28.450001</td>\n",
       "      <td>27.834999</td>\n",
       "      <td>27.905001</td>\n",
       "      <td>25.463926</td>\n",
       "      <td>1.656068e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3618</th>\n",
       "      <td>1995-04-05</td>\n",
       "      <td>0.304688</td>\n",
       "      <td>0.310268</td>\n",
       "      <td>0.301339</td>\n",
       "      <td>0.310268</td>\n",
       "      <td>0.265819</td>\n",
       "      <td>2.648576e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2900</th>\n",
       "      <td>1992-06-03</td>\n",
       "      <td>0.504464</td>\n",
       "      <td>0.504464</td>\n",
       "      <td>0.482143</td>\n",
       "      <td>0.483259</td>\n",
       "      <td>0.400285</td>\n",
       "      <td>3.005744e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3294</th>\n",
       "      <td>1993-12-22</td>\n",
       "      <td>0.243304</td>\n",
       "      <td>0.254464</td>\n",
       "      <td>0.241071</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.210634</td>\n",
       "      <td>1.813728e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3664</th>\n",
       "      <td>1995-06-12</td>\n",
       "      <td>0.392857</td>\n",
       "      <td>0.397321</td>\n",
       "      <td>0.391741</td>\n",
       "      <td>0.394392</td>\n",
       "      <td>0.338828</td>\n",
       "      <td>2.121168e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4825</th>\n",
       "      <td>2000-01-14</td>\n",
       "      <td>0.892857</td>\n",
       "      <td>0.912946</td>\n",
       "      <td>0.887277</td>\n",
       "      <td>0.896763</td>\n",
       "      <td>0.774928</td>\n",
       "      <td>3.903760e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4467</th>\n",
       "      <td>1998-08-14</td>\n",
       "      <td>0.363281</td>\n",
       "      <td>0.363839</td>\n",
       "      <td>0.352679</td>\n",
       "      <td>0.361607</td>\n",
       "      <td>0.312479</td>\n",
       "      <td>4.507776e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4414</th>\n",
       "      <td>1998-06-01</td>\n",
       "      <td>0.236607</td>\n",
       "      <td>0.246652</td>\n",
       "      <td>0.228795</td>\n",
       "      <td>0.234375</td>\n",
       "      <td>0.202533</td>\n",
       "      <td>3.196928e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2632</th>\n",
       "      <td>1991-05-13</td>\n",
       "      <td>0.466518</td>\n",
       "      <td>0.477679</td>\n",
       "      <td>0.459821</td>\n",
       "      <td>0.470982</td>\n",
       "      <td>0.385817</td>\n",
       "      <td>2.449440e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4893</th>\n",
       "      <td>2000-04-24</td>\n",
       "      <td>1.026786</td>\n",
       "      <td>1.075893</td>\n",
       "      <td>1.024554</td>\n",
       "      <td>1.075893</td>\n",
       "      <td>0.929721</td>\n",
       "      <td>4.436208e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>954</th>\n",
       "      <td>1984-09-20</td>\n",
       "      <td>0.121094</td>\n",
       "      <td>0.122210</td>\n",
       "      <td>0.121094</td>\n",
       "      <td>0.121094</td>\n",
       "      <td>0.095538</td>\n",
       "      <td>6.616960e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9940</th>\n",
       "      <td>2020-05-15</td>\n",
       "      <td>75.087502</td>\n",
       "      <td>76.974998</td>\n",
       "      <td>75.052498</td>\n",
       "      <td>76.927498</td>\n",
       "      <td>76.789047</td>\n",
       "      <td>1.663484e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7084</th>\n",
       "      <td>2009-01-09</td>\n",
       "      <td>3.328928</td>\n",
       "      <td>3.335000</td>\n",
       "      <td>3.219286</td>\n",
       "      <td>3.235000</td>\n",
       "      <td>2.795490</td>\n",
       "      <td>5.468456e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6677</th>\n",
       "      <td>2007-05-31</td>\n",
       "      <td>4.288214</td>\n",
       "      <td>4.363214</td>\n",
       "      <td>4.269286</td>\n",
       "      <td>4.328214</td>\n",
       "      <td>3.740180</td>\n",
       "      <td>1.297066e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5915</th>\n",
       "      <td>2004-05-19</td>\n",
       "      <td>0.489286</td>\n",
       "      <td>0.491071</td>\n",
       "      <td>0.471786</td>\n",
       "      <td>0.472679</td>\n",
       "      <td>0.408460</td>\n",
       "      <td>3.755920e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1067</th>\n",
       "      <td>1985-03-04</td>\n",
       "      <td>0.112723</td>\n",
       "      <td>0.116071</td>\n",
       "      <td>0.112723</td>\n",
       "      <td>0.112723</td>\n",
       "      <td>0.088934</td>\n",
       "      <td>1.531040e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6755</th>\n",
       "      <td>2007-09-20</td>\n",
       "      <td>5.005357</td>\n",
       "      <td>5.063929</td>\n",
       "      <td>4.975714</td>\n",
       "      <td>5.011071</td>\n",
       "      <td>4.330263</td>\n",
       "      <td>6.918408e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5084</th>\n",
       "      <td>2001-01-25</td>\n",
       "      <td>0.367188</td>\n",
       "      <td>0.367188</td>\n",
       "      <td>0.352679</td>\n",
       "      <td>0.356027</td>\n",
       "      <td>0.307657</td>\n",
       "      <td>4.897088e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1414</th>\n",
       "      <td>1986-07-18</td>\n",
       "      <td>0.143973</td>\n",
       "      <td>0.145089</td>\n",
       "      <td>0.139509</td>\n",
       "      <td>0.141741</td>\n",
       "      <td>0.111827</td>\n",
       "      <td>3.091200e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3206</th>\n",
       "      <td>1993-08-18</td>\n",
       "      <td>0.258929</td>\n",
       "      <td>0.265625</td>\n",
       "      <td>0.252232</td>\n",
       "      <td>0.254464</td>\n",
       "      <td>0.213629</td>\n",
       "      <td>1.887200e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7803</th>\n",
       "      <td>2011-11-15</td>\n",
       "      <td>13.600000</td>\n",
       "      <td>13.910714</td>\n",
       "      <td>13.551785</td>\n",
       "      <td>13.886786</td>\n",
       "      <td>12.000114</td>\n",
       "      <td>4.308108e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5645</th>\n",
       "      <td>2003-04-24</td>\n",
       "      <td>0.241429</td>\n",
       "      <td>0.243036</td>\n",
       "      <td>0.232143</td>\n",
       "      <td>0.240000</td>\n",
       "      <td>0.207393</td>\n",
       "      <td>3.251080e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6798</th>\n",
       "      <td>2007-11-20</td>\n",
       "      <td>5.916786</td>\n",
       "      <td>6.135357</td>\n",
       "      <td>5.840357</td>\n",
       "      <td>6.030357</td>\n",
       "      <td>5.211069</td>\n",
       "      <td>1.543643e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4947</th>\n",
       "      <td>2000-07-11</td>\n",
       "      <td>1.017857</td>\n",
       "      <td>1.058036</td>\n",
       "      <td>0.989955</td>\n",
       "      <td>1.016741</td>\n",
       "      <td>0.878606</td>\n",
       "      <td>3.578960e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7649</th>\n",
       "      <td>2011-04-07</td>\n",
       "      <td>12.075000</td>\n",
       "      <td>12.158215</td>\n",
       "      <td>12.001071</td>\n",
       "      <td>12.074286</td>\n",
       "      <td>10.433864</td>\n",
       "      <td>3.734472e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6931</th>\n",
       "      <td>2008-06-03</td>\n",
       "      <td>6.673572</td>\n",
       "      <td>6.721428</td>\n",
       "      <td>6.512143</td>\n",
       "      <td>6.620357</td>\n",
       "      <td>5.720910</td>\n",
       "      <td>7.505204e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2812</th>\n",
       "      <td>1992-01-28</td>\n",
       "      <td>0.578125</td>\n",
       "      <td>0.583705</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.582589</td>\n",
       "      <td>0.480694</td>\n",
       "      <td>1.737232e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9963</th>\n",
       "      <td>2020-06-18</td>\n",
       "      <td>87.852501</td>\n",
       "      <td>88.362503</td>\n",
       "      <td>87.305000</td>\n",
       "      <td>87.932503</td>\n",
       "      <td>87.774246</td>\n",
       "      <td>9.682040e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7968</th>\n",
       "      <td>2012-07-13</td>\n",
       "      <td>21.533928</td>\n",
       "      <td>21.685358</td>\n",
       "      <td>21.428572</td>\n",
       "      <td>21.606071</td>\n",
       "      <td>18.670649</td>\n",
       "      <td>3.114272e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1159</th>\n",
       "      <td>1985-07-15</td>\n",
       "      <td>0.079799</td>\n",
       "      <td>0.081473</td>\n",
       "      <td>0.079241</td>\n",
       "      <td>0.079241</td>\n",
       "      <td>0.062518</td>\n",
       "      <td>7.768320e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1610</th>\n",
       "      <td>1987-04-28</td>\n",
       "      <td>0.338170</td>\n",
       "      <td>0.347656</td>\n",
       "      <td>0.337054</td>\n",
       "      <td>0.343750</td>\n",
       "      <td>0.271204</td>\n",
       "      <td>3.248000e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3607</th>\n",
       "      <td>1995-03-21</td>\n",
       "      <td>0.316964</td>\n",
       "      <td>0.328125</td>\n",
       "      <td>0.314732</td>\n",
       "      <td>0.323661</td>\n",
       "      <td>0.277294</td>\n",
       "      <td>3.053680e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1041</th>\n",
       "      <td>1985-01-24</td>\n",
       "      <td>0.132254</td>\n",
       "      <td>0.132254</td>\n",
       "      <td>0.129464</td>\n",
       "      <td>0.129464</td>\n",
       "      <td>0.102142</td>\n",
       "      <td>3.970624e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date       Open       High        Low      Close  Adj Close  \\\n",
       "8140  2013-03-22  16.235001  16.503571  16.182501  16.496786  14.465927   \n",
       "4016  1996-10-30   0.209821   0.214286   0.204241   0.204241   0.176493   \n",
       "1127  1985-05-29   0.076451   0.077009   0.076451   0.076451   0.060316   \n",
       "6817  2007-12-18   6.661428   6.690357   6.378572   6.535000   5.647151   \n",
       "566   1983-03-10   0.194754   0.196987   0.190290   0.191964   0.151451   \n",
       "1178  1985-08-09   0.068080   0.068080   0.068080   0.068080   0.053712   \n",
       "6031  2004-11-03   0.970893   1.001964   0.964107   0.987679   0.853492   \n",
       "8575  2014-12-11  28.065001  28.450001  27.834999  27.905001  25.463926   \n",
       "3618  1995-04-05   0.304688   0.310268   0.301339   0.310268   0.265819   \n",
       "2900  1992-06-03   0.504464   0.504464   0.482143   0.483259   0.400285   \n",
       "3294  1993-12-22   0.243304   0.254464   0.241071   0.250000   0.210634   \n",
       "3664  1995-06-12   0.392857   0.397321   0.391741   0.394392   0.338828   \n",
       "4825  2000-01-14   0.892857   0.912946   0.887277   0.896763   0.774928   \n",
       "4467  1998-08-14   0.363281   0.363839   0.352679   0.361607   0.312479   \n",
       "4414  1998-06-01   0.236607   0.246652   0.228795   0.234375   0.202533   \n",
       "2632  1991-05-13   0.466518   0.477679   0.459821   0.470982   0.385817   \n",
       "4893  2000-04-24   1.026786   1.075893   1.024554   1.075893   0.929721   \n",
       "954   1984-09-20   0.121094   0.122210   0.121094   0.121094   0.095538   \n",
       "9940  2020-05-15  75.087502  76.974998  75.052498  76.927498  76.789047   \n",
       "7084  2009-01-09   3.328928   3.335000   3.219286   3.235000   2.795490   \n",
       "6677  2007-05-31   4.288214   4.363214   4.269286   4.328214   3.740180   \n",
       "5915  2004-05-19   0.489286   0.491071   0.471786   0.472679   0.408460   \n",
       "1067  1985-03-04   0.112723   0.116071   0.112723   0.112723   0.088934   \n",
       "6755  2007-09-20   5.005357   5.063929   4.975714   5.011071   4.330263   \n",
       "5084  2001-01-25   0.367188   0.367188   0.352679   0.356027   0.307657   \n",
       "1414  1986-07-18   0.143973   0.145089   0.139509   0.141741   0.111827   \n",
       "3206  1993-08-18   0.258929   0.265625   0.252232   0.254464   0.213629   \n",
       "7803  2011-11-15  13.600000  13.910714  13.551785  13.886786  12.000114   \n",
       "5645  2003-04-24   0.241429   0.243036   0.232143   0.240000   0.207393   \n",
       "6798  2007-11-20   5.916786   6.135357   5.840357   6.030357   5.211069   \n",
       "4947  2000-07-11   1.017857   1.058036   0.989955   1.016741   0.878606   \n",
       "7649  2011-04-07  12.075000  12.158215  12.001071  12.074286  10.433864   \n",
       "6931  2008-06-03   6.673572   6.721428   6.512143   6.620357   5.720910   \n",
       "2812  1992-01-28   0.578125   0.583705   0.562500   0.582589   0.480694   \n",
       "9963  2020-06-18  87.852501  88.362503  87.305000  87.932503  87.774246   \n",
       "7968  2012-07-13  21.533928  21.685358  21.428572  21.606071  18.670649   \n",
       "1159  1985-07-15   0.079799   0.081473   0.079241   0.079241   0.062518   \n",
       "1610  1987-04-28   0.338170   0.347656   0.337054   0.343750   0.271204   \n",
       "3607  1995-03-21   0.316964   0.328125   0.314732   0.323661   0.277294   \n",
       "1041  1985-01-24   0.132254   0.132254   0.129464   0.129464   0.102142   \n",
       "\n",
       "            Volume  \n",
       "8140  3.951052e+08  \n",
       "4016  2.570512e+08  \n",
       "1127  2.465568e+08  \n",
       "6817  1.222603e+09  \n",
       "566   1.126048e+08  \n",
       "1178  6.095040e+07  \n",
       "6031  1.204174e+09  \n",
       "8575  1.656068e+08  \n",
       "3618  2.648576e+08  \n",
       "2900  3.005744e+08  \n",
       "3294  1.813728e+08  \n",
       "3664  2.121168e+08  \n",
       "4825  3.903760e+08  \n",
       "4467  4.507776e+08  \n",
       "4414  3.196928e+08  \n",
       "2632  2.449440e+08  \n",
       "4893  4.436208e+08  \n",
       "954   6.616960e+07  \n",
       "9940  1.663484e+08  \n",
       "7084  5.468456e+08  \n",
       "6677  1.297066e+09  \n",
       "5915  3.755920e+08  \n",
       "1067  1.531040e+08  \n",
       "6755  6.918408e+08  \n",
       "5084  4.897088e+08  \n",
       "1414  3.091200e+08  \n",
       "3206  1.887200e+08  \n",
       "7803  4.308108e+08  \n",
       "5645  3.251080e+08  \n",
       "6798  1.543643e+09  \n",
       "4947  3.578960e+08  \n",
       "7649  3.734472e+08  \n",
       "6931  7.505204e+08  \n",
       "2812  1.737232e+08  \n",
       "9963  9.682040e+07  \n",
       "7968  3.114272e+08  \n",
       "1159  7.768320e+07  \n",
       "1610  3.248000e+08  \n",
       "3607  3.053680e+08  \n",
       "1041  3.970624e+08  "
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.sample(n=40)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d77a19fd-24db-473c-8756-4e2e9de6bdbf",
   "metadata": {},
   "source": [
    "Now you started seeing some numbers such as Apple's open stock price and the volume. Something which is very important for stock traders is the price it started trading at and the price it is at now. You will start by filtering out the first 10 columns of the stock price and you will type \"print(df.head(3))\" . The word \"head\" in your code basically means the beginning of your data frame. And you probably already guessed it, if \"head\" shows you the beginning then \"tail\" shows you the end. We will start by \"print(df.head(3))\" then try \"print(df.tail(3))\" ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "a089f879-d00b-4646-b7d6-48e18d808cbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Date      Open      High       Low     Close  Adj Close       Volume\n",
      "0  1980-12-12  0.128348  0.128906  0.128348  0.128348   0.101261  469033600.0\n",
      "1  1980-12-15  0.122210  0.122210  0.121652  0.121652   0.095978  175884800.0\n",
      "2  1980-12-16  0.113281  0.113281  0.112723  0.112723   0.088934  105728000.0\n"
     ]
    }
   ],
   "source": [
    "print(df.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "8fd19e6b-6936-4af6-8784-ca97e771423e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Date        Open        High         Low       Close   Adj Close  \\\n",
      "10013  2020-08-28  126.012497  126.442497  124.577499  124.807503  124.807503   \n",
      "10014  2020-08-31  127.580002  131.000000  126.000000  129.039993  129.039993   \n",
      "10015  2020-09-01  132.759995  134.800003  130.529999  134.179993  134.179993   \n",
      "\n",
      "            Volume  \n",
      "10013  187630000.0  \n",
      "10014  225702700.0  \n",
      "10015  151948100.0  \n"
     ]
    }
   ],
   "source": [
    "print(df.tail(3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc88853f-5805-4844-a6f1-661ab693ee2d",
   "metadata": {},
   "source": [
    "We can notice that over 40 years the stock increased from a high of 0.1289 in 1980 and reached a high of 134.80 in 2020. That is an increase of 1,044%. \n",
    "\n",
    "Apple stock is one of the most important stocks in the US market as Apple is the biggest company is the world and there is a huge correlation between the market and the stock. So now that we found out Apple is at 134$ in 2020, how long was Apple able to sustaina price over 12 Was it a one day rise? One month? Or was it a year?\n",
    "\n",
    "You will figure that out by inputting \"print(df[\"High\"] >= 70)\". This code is telling pyhton to look through the columns under \"High\" and see if the price was greater than or equal to 70."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ccfd161-05d0-4c2e-910e-933205127585",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "c86f89f5-5570-4e34-88f6-ead3fc7f00d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        False\n",
      "1        False\n",
      "2        False\n",
      "3        False\n",
      "4        False\n",
      "         ...  \n",
      "10011     True\n",
      "10012     True\n",
      "10013     True\n",
      "10014     True\n",
      "10015     True\n",
      "Name: High, Length: 10016, dtype: bool\n"
     ]
    }
   ],
   "source": [
    "print(df[\"High\"] >= 110)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab19ec2a-c744-468c-9d82-5279a8d279b6",
   "metadata": {},
   "source": [
    "\n",
    "### Weird! Notice anything strange?\n",
    "### Why did you get it in this format and not just get rows where the \"High is greater than 70?\n",
    "This is because this code is running a function that compares every single value in \"High\" to the number of \"70\" or greater and then assigning a true or false. To get what you want, you will have to to wrap the whole function \"(df[\"High\"] >= 70)\" and add a df[ before it. When doing that you are referencing the High to your data frame and you end up with function print(df[(df[\"High\"] >= 120)])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a11b26fe-b50e-4e3e-83cb-143fba387e73",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bc79e8ed-45e2-4203-8385-3d2aa68e2f2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Date        Open        High         Low       Close   Adj Close  \\\n",
      "9836   2019-12-16   69.250000   70.197502   69.245003   69.964996   69.485619   \n",
      "9837   2019-12-17   69.892502   70.442497   69.699997   70.102501   69.622192   \n",
      "9838   2019-12-18   69.949997   70.474998   69.779999   69.934998   69.455833   \n",
      "9839   2019-12-19   69.875000   70.294998   69.737503   70.004997   69.525352   \n",
      "9840   2019-12-20   70.557503   70.662498   69.639999   69.860001   69.381348   \n",
      "...           ...         ...         ...         ...         ...         ...   \n",
      "10011  2020-08-26  126.180000  126.992500  125.082497  126.522499  126.522499   \n",
      "10012  2020-08-27  127.142502  127.485001  123.832497  125.010002  125.010002   \n",
      "10013  2020-08-28  126.012497  126.442497  124.577499  124.807503  124.807503   \n",
      "10014  2020-08-31  127.580002  131.000000  126.000000  129.039993  129.039993   \n",
      "10015  2020-09-01  132.759995  134.800003  130.529999  134.179993  134.179993   \n",
      "\n",
      "            Volume  \n",
      "9836   128186000.0  \n",
      "9837   114158400.0  \n",
      "9838   116028400.0  \n",
      "9839    98369200.0  \n",
      "9840   275978000.0  \n",
      "...            ...  \n",
      "10011  163022400.0  \n",
      "10012  155552400.0  \n",
      "10013  187630000.0  \n",
      "10014  225702700.0  \n",
      "10015  151948100.0  \n",
      "\n",
      "[154 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df[(df[\"High\"] >= 70)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb85c456-abdd-4d2d-979e-b1f1cd357be3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Price_Filter=df[(df[\"High\"] >= 70)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "470ba6d8-2bfc-40a4-97d0-5f4e8dbdd281",
   "metadata": {},
   "source": [
    "### Results!\n",
    "We are now finally able to see that Apple stock has been equal or greater than 70 for only one year which is in 2020. \n",
    "\n",
    "This indicates that Apple even though consider a safe stock is very volatile.\n",
    "\n",
    "Since Apple and the stock market are strongly correlated, you can assume that the stock market behaves in a similar matter!\n",
    "\n",
    "But why assume? Since you went through this model, go and find a date base of the US Stock market and filter the data just like we did now! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "50e331d5-900f-4490-9a4e-246c416cc6d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "Price_Filter.to_csv(\"Price_Filter.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23cb8dbe-a090-4a16-87d2-9406c4120777",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
